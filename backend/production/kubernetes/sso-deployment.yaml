# Kubernetes Production Deployment for CyberShield Enterprise SSO
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cybershield-sso
  namespace: cybershield-production
  labels:
    app: cybershield-sso
    tier: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cybershield-sso
  template:
    metadata:
      labels:
        app: cybershield-sso
        tier: backend
    spec:
      containers:
      - name: cybershield-sso
        image: cybershield/ironcore-backend:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        # Database Configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: database-url
        - name: DATABASE_REPLICA_URL
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: database-replica-url
        
        # Redis Configuration  
        - name: REDIS_HOST
          value: "redis-cluster.cybershield-redis"
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: redis-password
        
        # Active Directory Configuration
        - name: AD_SERVER
          valueFrom:
            configMapKeyRef:
              name: cybershield-config
              key: ad-server
        - name: AD_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: cybershield-config
              key: ad-domain
        - name: AD_SERVICE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: ad-service-account
        - name: AD_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: ad-service-password
        
        # SAML Configuration
        - name: SAML_ISSUER
          value: "https://cybershield-ironcore.com"
        - name: SAML_CERT_PATH
          value: "/etc/ssl/saml/cybershield.crt"
        - name: SAML_KEY_PATH
          value: "/etc/ssl/saml/cybershield.key"
        
        # External Services
        - name: TWILIO_ACCOUNT_SID
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: twilio-account-sid
        - name: TWILIO_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: twilio-auth-token
        - name: SENDGRID_API_KEY
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: sendgrid-api-key
        
        # Security
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: cybershield-secrets
              key: encryption-key
        
        # Environment
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        
        # Volume mounts for certificates
        volumeMounts:
        - name: saml-certs
          mountPath: /etc/ssl/saml
          readOnly: true
        - name: ca-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        
        # Resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      # Volumes
      volumes:
      - name: saml-certs
        secret:
          secretName: saml-certificates
          defaultMode: 0400
      - name: ca-certs
        configMap:
          name: ca-certificates
      
      # Image pull secrets
      imagePullSecrets:
      - name: cybershield-registry-secret

---
# Service for SSO backend
apiVersion: v1
kind: Service
metadata:
  name: cybershield-sso-service
  namespace: cybershield-production
  labels:
    app: cybershield-sso
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: cybershield-sso

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cybershield-sso-hpa
  namespace: cybershield-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cybershield-sso
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cybershield-sso-network-policy
  namespace: cybershield-production
spec:
  podSelector:
    matchLabels:
      app: cybershield-sso
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: cybershield-frontend
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow external AD/LDAP connections
    ports:
    - protocol: TCP
      port: 636  # LDAPS
    - protocol: TCP
      port: 389  # LDAP